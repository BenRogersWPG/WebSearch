{"version":3,"file":"extension.js","mappings":"8bAEA,eAGMA,EAAmBC,EAAOC,OAAOC,oBAAoB,aAAc,YAqJzE,SAAeC,EAAWC,EAAeC,EAAeC,G,yCAEvD,MAAMC,EAA0BP,EAAOQ,UAAUC,iBAAiB,aAAaC,IAAI,gBAG7EC,EAAyB,IAAIC,MAAMZ,EAAOQ,UAAUC,iBAAiB,aAAaC,IAAI,kBAMtFG,EAAyC,IAAID,MAAMZ,EAAOQ,UAAUC,iBAAiB,aAAaC,IAAI,yBAG5G,IAAII,EAAgC,GAGhCR,GAEHO,EAAqBE,SAAQC,IAC5BC,OAAOC,QAAQF,GAAMD,SAAQ,EAAEI,EAAKC,MAEnCN,EAAMO,KAAK,CACVC,MAAOF,EAAMG,SACbC,YAAaJ,EAAMK,IAEnBC,OAAQ,UAAUN,EAAMG,gBAAgBnB,EAAQA,EAAMuB,QAAU,GAAKvB,EAAMwB,MAAM,EAAG,IAAMxB,EAAMwB,MAAM,EAAG,IAAIC,OAAO,KAAO,aAO/H,IAAIC,EAAmBC,KAAKC,MAAMD,KAAKE,UAAUtB,IAG7CuB,EAAoBjB,OAAOkB,KAAKL,EAAiB,IAAIM,KAAKjB,GAAQ,CAACkB,OAAOlB,GAAMW,EAAiB,GAAGX,MAGxG,IAAK,IAAImB,EAAI,EAAGA,EAAIJ,EAAkBP,OAAQW,IAC7CxB,EAAMO,KAAK,CACVC,MAAOY,EAAkBI,GAAG,GAC5Bd,YAAaU,EAAkBI,GAAG,GAElCZ,OAAQ,UAAUQ,EAAkBI,GAAG,UAAUlC,EAAQA,EAAMuB,QAAU,GAAKvB,EAAMwB,MAAM,EAAG,IAAMxB,EAAMwB,MAAM,EAAG,IAAIC,OAAO,KAAO,OAMtI,GAAIvB,GAAkC,IAAjBQ,EAAMa,OAAc,CAGxC,MAAMY,EAA6C,CAClDjB,MAAO,gBACPE,YAAajB,EACbmB,OAAQ,mCAGTZ,EAAMO,KAAKkB,GAWZ,IAAIC,EAPJ1B,EAAQA,EAAM2B,QAAO,CAACC,EAAMC,EAAOC,IAClCD,IAAUC,EAAKC,WAAWC,GACzBA,EAAEtB,cAAgBkB,EAAKlB,gBAQzB,IAAIuB,GAAe,EAGfjC,EAAMa,OAAS,GAEdtB,GAAQL,EAAOC,OAAO+C,uBAAuB,yDAGjDR,QAA6BxC,EAAOC,OAAOgD,cAAcnC,KAIzD0B,EAAuB1B,EAAM,GAC7BiC,GAAe,GAIhB,IAAIG,EAAoB,GAExB,GAAIV,MAAAA,EAYJ,GALCU,EAAYV,MAAAA,OAAoB,EAApBA,EAAsBhB,aAK9B0B,EAAUC,WAAW,YAAcD,EAAUC,WAAW,cAAiBD,EAAUE,SAAS,MAGhGF,EAAYA,EAAUG,QAAQ,KAAMjD,GAAgB,IAGpD2C,EAAe/C,EAAOC,OAAO+C,uBAAuB,gDAA+CR,MAAAA,OAAoB,EAApBA,EAAsBlB,OAAQkB,MAAAA,OAAoB,EAApBA,EAAsBlB,MAAQ,uBAAuBlB,8DAAoEJ,EAAOC,OAAO+C,uBAAuB,cAAaR,MAAAA,OAAoB,EAApBA,EAAsBlB,OAAQkB,MAAAA,OAAoB,EAApBA,EAAsBlB,MAAQ,cAAclB,KAEtXJ,EAAOsD,IAAIC,aAAavD,EAAOwD,IAAIxB,MAAMkB,QAGrC,CAEJ,MAAMO,EAAuB,oBAAmBjB,MAAAA,OAAoB,EAApBA,EAAsBlB,OAAQkB,MAAAA,OAAoB,EAApBA,EAAsBlB,MAAQ,kEAG5GvB,EAAiB2D,WAAWD,EAAe,uGAC3CE,QAAQC,IAAIH,GAIY,8BADMzD,EAAOC,OAAO4D,iBAAiBJ,EAAc,yBAE1EzD,EAAO8D,SAASC,eAAe,gCAAiC,2BAChE/D,EAAOC,OAAO+C,uBAAuB,gDAA+CR,MAAAA,OAAoB,EAApBA,EAAsBlB,OAAQkB,MAAAA,OAAoB,EAApBA,EAAsBlB,MAAQ,yDAjCjJtB,EAAOC,OAAO+D,mBAAmB,gFAhPnC,oBAAyBC,GAuDxB,SAAeC,EAAiB7D,GAAgB,G,+CAI/C,MAAM8D,EAASnE,EAAOC,OAAOmE,iBAC7B,IAAIC,EAAOhE,EAAO,SAAyC,QAA9B,EAAAL,EAAOC,OAAOmE,wBAAgB,eAAEE,SAASC,QAAQJ,EAAQK,WAEtF,MAAMC,EAAwBzE,EAAOQ,UAAUC,iBAAiB,aAAaC,IAAI,qBAC3EJ,EAAyBN,EAAOQ,UAAUC,iBAAiB,aAAaC,IAAI,+BAMlF,GAHAiD,QAAQC,IAAIS,QAGEK,IAATL,GAA+B,KAATA,GAAkBI,GAMxC,QAAaC,IAATL,GAA+B,KAATA,EAC9BlE,EAAWkE,EAAMhE,EAAMC,QAInB,SAAcoE,IAATL,GAA+B,KAATA,IAAgB,EAAgB,CAE/D,IAAIM,EAAQ3E,EAAOC,OAAO2E,kBAGtBC,EAAyC,GAE7CA,EAAexD,KAAK,CAAEC,MAAO,IAAKE,YAAa,gCAG/CmD,EAAM7D,MAAQ+D,EAEd,MAAMV,EAASnE,EAAOC,OAAOmE,sBACdM,IAAXP,IACHQ,EAAMvD,MAAQ+C,EAAOG,SAASC,QAAQJ,EAAOK,WACzCG,EAAMvD,MAAMO,QAIjBgD,EAAMG,aAAY,IAAY,EAAD,gCAE5BT,EAAOM,EAAMI,cAAc,GAAGzD,WAEjBoD,IAATL,GAA+B,KAATA,EAKzBlE,EAAWkE,EAAMhE,EAAMC,GAJvBN,EAAOC,OAAO+C,uBAAuB,0EAUvC2B,EAAMK,kBAAuB5D,GAAS,EAAD,gCAEpC,IAAI6D,EAA0C,GAG9CA,EAAgB5D,KAAK,CAAEC,MAAOqD,EAAMvD,MAAOI,YAAa,eAAiBmD,EAAMvD,QAG/EuD,EAAM7D,MAAQmE,OAKfN,EAAMO,MAAQ,cAEdP,EAAMQ,YAAc,yBACpBR,EAAMS,WAAU,IAAMT,EAAMU,YAC5BV,EAAMW,aA7DNtF,EAAOC,OAAO+C,uBAAuB,wEAnEvCW,QAAQC,IAAI,2KAGZK,EAAQsB,cAAclE,KAAKrB,EAAO8D,SAAS0B,gBAAgB,8BAA8B,IAAY,EAAD,sCAC7F,IAAIC,SAAQC,GAAWC,WAAWD,EAAS,OACjD1F,EAAO8D,SAASC,eAAe,aAAc,sBAAsB,GACnEG,GAAiB,SAIlBD,EAAQsB,cAAclE,KAAKrB,EAAO8D,SAAS0B,gBAAgB,sBAAsB,IAAY,EAAD,sCACrF,IAAIC,SAAQC,GAAWC,WAAWD,EAAS,OACjD1F,EAAO8D,SAASC,eAAe,aAAc,YAAY,GACzD/D,EAAOC,OAAO+C,uBAAuB,0EACrCkB,UAIDD,EAAQsB,cAAclE,KAAKrB,EAAO8D,SAAS0B,gBAAgB,2BAA2B,IAAY,EAAD,sCAC1F,IAAIC,SAAQC,GAAWC,WAAWD,EAAS,OACjD1F,EAAOQ,UAAUC,iBAAiB,aAAamF,OAAO,+BAA+B,GACrF5F,EAAO8D,SAASC,eAAe,aAAc,eAAe,GAC5D/D,EAAOC,OAAO+C,uBAAuB,6EAItCiB,EAAQsB,cAAclE,KAAKrB,EAAO8D,SAAS0B,gBAAgB,0BAA0B,KACpFxF,EAAO8D,SAASC,eAAe,gCAAiC,2BAChE/D,EAAOC,OAAO+C,uBAAuB,oEAItCiB,EAAQsB,cAAclE,KAAKrB,EAAO8D,SAAS0B,gBAAgB,wBAAwB,IAAY,EAAD,sCACvF,IAAIC,SAAQC,GAAWC,WAAWD,EAAS,OACjD1F,EAAO8D,SAASC,eAAe,aAAc,gBAAgB,GAC7D/D,EAAOC,OAAO+C,uBAAuB,oEACrCkB,UAIDD,EAAQsB,cAAclE,KAAKrB,EAAO8D,SAAS0B,gBAAgB,+BAA+B,IAAY,EAAD,sCAC9F,IAAIC,SAAQC,GAAWC,WAAWD,EAAS,OACjD1F,EAAO8D,SAASC,eAAe,aAAc,wBAAwB,GACrE/D,EAAOC,OAAO+C,uBAAuB,6EACrCkB,UAIDD,EAAQsB,cAAclE,KAAKrB,EAAO8D,SAAS0B,gBAAgB,2BAA2B,KACrFtB,SAoOF,2B,QChSA2B,EAAOC,QAAUC,QAAQ,YCCrBC,EAA2B,GCE3BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBzB,IAAjB0B,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,IAOV,OAHAO,EAAoBF,GAAUG,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,QClBWI,CAAoB,K","sources":["../.././src/web/extension.ts","../../external commonjs \"vscode\"","../../webpack/bootstrap","../../webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\r\n// Import the module and reference it with the alias vscode:\r\nimport * as vscode from 'vscode';\r\n\r\n//Define a channel for the output of any potential errors:\r\nconst webSearchConsole = vscode.window.createOutputChannel(\"Web Search\", \"markdown\");\r\n\r\n// this method is called when the extension is activated:\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\r\n\t// Notify the user that the extension has been activated successfully:\r\n\tconsole.log('Thank you for installing Web Search, the extension is now active! To use, right click some highlighted text in your editor or type \"web search\" in the command palette.');\r\n\r\n\t// Register a command that will toggle when the extension is demoing searching from selected text:\r\n\tcontext.subscriptions.push(vscode.commands.registerCommand('WebSearch.selectedTextDemo', async () => {\r\n\t\tawait new Promise(resolve => setTimeout(resolve, 1000));\r\n\t\tvscode.commands.executeCommand('setContext', 'searchSelectedText', true);\r\n\t\tperformWebSearch(true);\r\n\t}));\r\n\r\n\t// Register a command to run the extension for the first time - used in the extension's walkthrough:\r\n\tcontext.subscriptions.push(vscode.commands.registerCommand('WebSearch.firstRun', async () => {\r\n\t\tawait new Promise(resolve => setTimeout(resolve, 500));\r\n\t\tvscode.commands.executeCommand('setContext', 'firstRun', true);\r\n\t\tvscode.window.showInformationMessage(`Type a query in the search bar at the top of the screen & press Enter.`);\r\n\t\tperformWebSearch();\r\n\t}));\r\n\r\n\t// Register a command to update a setting (toggling demo mode), which is used in the extension's walkthrough:\r\n\tcontext.subscriptions.push(vscode.commands.registerCommand('WebSearch.changeSetting', async () => {\r\n\t\tawait new Promise(resolve => setTimeout(resolve, 1000));\r\n\t\tvscode.workspace.getConfiguration('webSearch').update('useDefaultSearchEnginesList', false);\r\n\t\tvscode.commands.executeCommand('setContext', 'demoModeOff', true);\r\n\t\tvscode.window.showInformationMessage(`Demo mode off. Remember to add your own search engines in settings.`);\r\n\t}));\r\n\r\n\t// Register a command that will take the user to the WebSearch extension's settings page:\r\n\tcontext.subscriptions.push(vscode.commands.registerCommand('WebSearch.openSettings', () => {\r\n\t\tvscode.commands.executeCommand('workbench.action.openSettings', 'WebSearch.searchEngines');\r\n\t\tvscode.window.showInformationMessage(`Add your own search engines by clicking the Add Item button.`);\r\n\t}));\r\n\r\n\t// Register a command that will toggle when the extension is run after entering custom search engines:\r\n\tcontext.subscriptions.push(vscode.commands.registerCommand('WebSearch.setContext', async () => {\r\n\t\tawait new Promise(resolve => setTimeout(resolve, 1000));\r\n\t\tvscode.commands.executeCommand('setContext', 'customSearch', true);\r\n\t\tvscode.window.showInformationMessage(`You should now see your custom search engines in the search bar.`);\r\n\t\tperformWebSearch();\r\n\t}));\r\n\r\n\t// Register a command that will toggle when the extension is demoing the Command Palette (deprecated):\r\n\tcontext.subscriptions.push(vscode.commands.registerCommand('WebSearch.setPaletteContext', async () => {\r\n\t\tawait new Promise(resolve => setTimeout(resolve, 1000));\r\n\t\tvscode.commands.executeCommand('setContext', 'searchCommandPalette', true);\r\n\t\tvscode.window.showInformationMessage(`Run the extension any time by typing \"web search\" in the command palette.`);\r\n\t\tperformWebSearch();\r\n\t}));\r\n\r\n\t// Provide the implementation of the command with registerCommand using the commandId parameter from the command field in package.json\r\n\tcontext.subscriptions.push(vscode.commands.registerCommand('WebSearch.webSearchMenu', () => {\r\n\t\tperformWebSearch();\r\n\t}));\r\n\r\n\tasync function performWebSearch(demo: boolean = false) {\r\n\t\t//Function to perform the web search\r\n\r\n\t\t//Gather the user's currently selected text from the active text editor:\r\n\t\tconst editor = vscode.window.activeTextEditor;\r\n\t\tlet text = demo ? \"eslint\" : vscode.window.activeTextEditor?.document.getText(editor!.selection); //If demo is true, use the string \"eslint\" as the search term\r\n\r\n\t\tconst manualSearch: boolean = vscode.workspace.getConfiguration('webSearch').get('allowManualSearch')!;\r\n\t\tconst defaultSearch: boolean = vscode.workspace.getConfiguration('webSearch').get('useDefaultSearchEnginesList')!;\r\n\r\n\r\n\t\tconsole.log(text);\r\n\r\n\t\t//Display a message to the user if no text was selected:\r\n\t\tif ((text === undefined || text === \"\") && (!manualSearch)) {\r\n\t\t\tvscode.window.showInformationMessage(`No text selected. Please select text in the editor and try again.`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//If the user has already selected text, run it through the final search function:\r\n\t\telse if (text !== undefined && text !== \"\") {\r\n\t\t\tsearchText(text, demo, defaultSearch);\r\n\t\t}\r\n\r\n\t\t//If manual search setting is enabled, prompt the user for a search term:\r\n\t\telse if ((text === undefined || text === \"\") && (manualSearch)) {\r\n\t\t\t//assign text to the user's selected quickpick item by creating a quickpick and using the quickpick's selected item:\r\n\t\t\tlet input = vscode.window.createQuickPick();\r\n\r\n\t\t\t//Create a list of quickpick items:\r\n\t\t\tlet quickpickItems: vscode.QuickPickItem[] = [];\r\n\t\t\t//Start the user off with a default search term to prompt them to enter a custom search term:\r\n\t\t\tquickpickItems.push({ label: \" \", description: \"Enter your search term here\" });\r\n\r\n\t\t\t//Add the quickpick items to the quickpick:\r\n\t\t\tinput.items = quickpickItems;\r\n\r\n\t\t\tconst editor = vscode.window.activeTextEditor;\r\n\t\t\tif (editor !== undefined) {\r\n\t\t\t\tinput.value = editor.document.getText(editor.selection);\r\n\t\t\t\tif (input.value.length > 0) {\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tinput.onDidAccept(async () => {\r\n\t\t\t\t//Set text to the quickpick's currently selected item:\r\n\t\t\t\ttext = input.selectedItems[0].label;\r\n\r\n\t\t\t\tif (text === undefined || text === \"\") {\r\n\t\t\t\t\tvscode.window.showInformationMessage(`No text entered. Please enter text in the prompt, or select text.`);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsearchText(text, demo, defaultSearch);\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t});\r\n\t\t\tinput.onDidChangeValue(async value => {\r\n\r\n\t\t\t\tlet quickpickItems3: vscode.QuickPickItem[] = [];\r\n\r\n\t\t\t\t//Make the first item in the list the currently entered text:\r\n\t\t\t\tquickpickItems3.push({ label: input.value, description: \"Search for: \" + input.value });\r\n\t\t\t\t//Will be adding additional items from Google Suggest / DuckDuckGo Suggest here soon...\r\n\r\n\t\t\t\tinput.items = quickpickItems3;\r\n\r\n\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tinput.title = `Search for:`;\r\n\t\t\t//input.title = `Search DuckDuckGo for:`;\r\n\t\t\tinput.placeholder = 'Start typing to search';\r\n\t\t\tinput.onDidHide(() => input.dispose());\r\n\t\t\tinput.show();\r\n\r\n\t\t\t//await new Promise(resolve => setTimeout(resolve, 1000));\r\n\t\t\t//if (text === undefined || text === \"\") {\r\n\t\t\t//\tvscode.window.showInformationMessage(`Please enter text in the prompt, or select text.`);\r\n\t\t\t//\treturn;\r\n\t\t\t//}\r\n\r\n\t\t}\r\n\r\n\r\n\t}\r\n}\r\n\r\n\r\nasync function searchText(query: string, demo: boolean, defaultSearch: boolean) {\r\n\t//Retrieve the extension's search engine configuration from the user settings:\r\n\tconst searchEngineOld: string = vscode.workspace.getConfiguration('webSearch').get('searchEngine')!;//Deprecated, will be removed in future versions\r\n\r\n\t//Get the user settings from the extension's settings.json file:\r\n\tconst searchEngine: string[] = new Array(vscode.workspace.getConfiguration('webSearch').get('searchEngines'));\r\n\r\n\t//Define default search engine signature:\r\n\tinterface IDefaultObject { sitename: string; url: string; }\r\n\r\n\t//use this interface to ghet the default search engine list from the settings.json file:\r\n\tconst defaultSearchEngines: IDefaultObject[] = new Array(vscode.workspace.getConfiguration('webSearch').get('defaultSearchEngines'));\r\n\r\n\t//Now that we have an array of search engines, we need to loop through them and display them in a quick pick list\r\n\tlet items: vscode.QuickPickItem[] = [];\r\n\r\n\t//Only populate the default search engine list if the user wishes to use default search engines:\r\n\tif (defaultSearch) {\r\n\t\t//Loop through the search engines array in the configuration settings and add them to the list:\r\n\t\tdefaultSearchEngines.forEach(site => {\r\n\t\t\tObject.entries(site).forEach(([key, value]) => {\r\n\t\t\t\t//console.log(key, value);\r\n\t\t\t\titems.push({\r\n\t\t\t\t\tlabel: value.sitename,\r\n\t\t\t\t\tdescription: value.url,\r\n\t\t\t\t\t//Display the selected text in the quick pick list. If the text exceeds 60 characters, it will be truncated with an ellipsis:\r\n\t\t\t\t\tdetail: `Search ${value.sitename} for ${query ? query.length <= 60 ? query.slice(0, 60) : query.slice(0, 60).concat('…') : \"\"}`,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t//Convert the JSON object to string and parse the string to an object:\r\n\tvar searchEngineList = JSON.parse(JSON.stringify(searchEngine));\r\n\r\n\t//Map the searchEngineList to a new array:\r\n\tvar searchEngineArray = Object.keys(searchEngineList[0]).map((key) => [String(key), searchEngineList[0][key]]);\r\n\r\n\t//Loop through the search engines array in the configuration settings and add them to the list:\r\n\tfor (let i = 0; i < searchEngineArray.length; i++) {\r\n\t\titems.push({\r\n\t\t\tlabel: searchEngineArray[i][0],\r\n\t\t\tdescription: searchEngineArray[i][1],\r\n\t\t\t//Display the selected text in the quick pick list. If the text exceeds 60 characters, it will be truncated with an ellipsis:\r\n\t\t\tdetail: `Search ${searchEngineArray[i][0]} for ${query ? query.length <= 60 ? query.slice(0, 60) : query.slice(0, 60).concat('…') : \"\"}`,\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t//Only populate the old search engine list if the user wishes to use default search engines:\r\n\tif (defaultSearch || items.length === 0) {\r\n\r\n\t\t//Create a quick pick list variable to handle the old search engine (defined as it is used a couple times, saving many lines of code):\r\n\t\tconst searchEngineOldArray: vscode.QuickPickItem = {\r\n\t\t\tlabel: \"Search Engine\",\r\n\t\t\tdescription: searchEngineOld,\r\n\t\t\tdetail: \"Search Engine from old settings\",\r\n\t\t};\r\n\r\n\t\titems.push(searchEngineOldArray);\r\n\t}\r\n\r\n\t//remove any duplicate items with the same description:\r\n\titems = items.filter((item, index, self) =>\r\n\t\tindex === self.findIndex((t) => (\r\n\t\t\tt.description === item.description\r\n\t\t))\r\n\t);\r\n\r\n\t//Initialize selectedSearchEngine variable as a QuickPickItem:\r\n\tlet selectedSearchEngine: vscode.QuickPickItem;\r\n\r\n\t//Initialize a boolean variable that, when set to true, indicates that there is only 1 search engine defined and the extension will open the URL directly:\r\n\tlet directSearch = false;\r\n\r\n\t//If more than one item is in the list, display the list in a quick pick list, otherwise, just run the search in the single search engine:\r\n\tif (items.length > 1) {\r\n\t\t//If demo mode is enabled, display a message to the user:\r\n\t\tif (demo) { vscode.window.showInformationMessage(`Select the search engine to use using the list above.`); }\r\n\r\n\t\t//Use await to wait for the user to select an item from the list:\r\n\t\tselectedSearchEngine = await vscode.window.showQuickPick(items) as vscode.QuickPickItem;\r\n\t}\r\n\telse {\r\n\t\t//If only one item exits in the list, use that item as the search engine (search it directly) - no need to prompt the user:\r\n\t\tselectedSearchEngine = items[0];\r\n\t\tdirectSearch = true;\r\n\t}\r\n\r\n\t//Create the final search url:\r\n\tlet searchUrl: string = \"\";\r\n\r\n\tif (selectedSearchEngine === null || selectedSearchEngine === undefined) {\r\n\t\t//Since no search engine was selected, notify the user and end the function:\r\n\t\tvscode.window.showWarningMessage(`No search engine selected. Please select one from the list and try again.`);\r\n\t\treturn;\r\n\t}\r\n\telse {\r\n\t\t//Set the search engine to the selected Quick Pick engine:\r\n\t\tsearchUrl = selectedSearchEngine?.description!;\r\n\r\n\t}\r\n\r\n\t//Determine if the searchURL begins with http/https as well as contains '%s', and if it does not, then display a message to the user that thir setting entry is not valid:\r\n\tif ((searchUrl.startsWith(\"http://\") || searchUrl.startsWith(\"https://\")) && (searchUrl.includes(\"%s\"))) {\r\n\r\n\t\t//Perform a string replacement to replace the %s placeholder of the search engine with the $text search query:\r\n\t\tsearchUrl = searchUrl.replace('%s', query ? query : \"\")!;\r\n\r\n\t\t//Display to the user what action is being taken and on what search engine:\r\n\t\tdirectSearch ? vscode.window.showInformationMessage(`Only one search engine exists, so searching ${selectedSearchEngine?.label ? selectedSearchEngine?.label : \"web\"} directly for: ${query}. \\nFeel free to add more search engines in the settings.`) : vscode.window.showInformationMessage(`Searching ${selectedSearchEngine?.label ? selectedSearchEngine?.label : \"web\"} for: ${query}`);\r\n\t\t//Perform the web search in the default browser:\r\n\t\tvscode.env.openExternal(vscode.Uri.parse(searchUrl!));\r\n\r\n\t}\r\n\telse {\r\n\t\t//Display to the user that their search engine setting is not valid:\r\n\t\tconst errorMessage: string = `Search engine, *${selectedSearchEngine?.label ? selectedSearchEngine?.label : \"web\"}* setting is not valid. Please check your custom settings.`;\r\n\r\n\t\t//Log the error to the extension's output channel and the console:\r\n\t\twebSearchConsole.appendLine(errorMessage + \"\\nBe sure to include `%s` in the search engine URL and that it begins with `http://` or `https://`.\");\r\n\t\tconsole.log(errorMessage);\r\n\r\n\t\t//Show button to user and offer to bring them to the settings to edit their invalid search engine:\r\n\t\tconst messageResponse = await vscode.window.showErrorMessage(errorMessage, 'Edit Search Engine');\r\n\t\tif (messageResponse === \"Edit Search Engine\") {\r\n\t\t\tvscode.commands.executeCommand('workbench.action.openSettings', 'WebSearch.searchEngines');\r\n\t\t\tvscode.window.showInformationMessage(`Make changes to your invalid search engine, ${selectedSearchEngine?.label ? selectedSearchEngine?.label : \"web\"}. Make sure to add '%s' in the Value field`);\r\n\t\t}\r\n\r\n\t}\r\n}\r\n\r\n// Extension is deactivated\r\nexport function deactivate() { }","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(236);\n"],"names":["webSearchConsole","vscode","window","createOutputChannel","searchText","query","demo","defaultSearch","searchEngineOld","workspace","getConfiguration","get","searchEngine","Array","defaultSearchEngines","items","forEach","site","Object","entries","key","value","push","label","sitename","description","url","detail","length","slice","concat","searchEngineList","JSON","parse","stringify","searchEngineArray","keys","map","String","i","searchEngineOldArray","selectedSearchEngine","filter","item","index","self","findIndex","t","directSearch","showInformationMessage","showQuickPick","searchUrl","startsWith","includes","replace","env","openExternal","Uri","errorMessage","appendLine","console","log","showErrorMessage","commands","executeCommand","showWarningMessage","context","performWebSearch","editor","activeTextEditor","text","document","getText","selection","manualSearch","undefined","input","createQuickPick","quickpickItems","onDidAccept","selectedItems","onDidChangeValue","quickpickItems3","title","placeholder","onDidHide","dispose","show","subscriptions","registerCommand","Promise","resolve","setTimeout","update","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}