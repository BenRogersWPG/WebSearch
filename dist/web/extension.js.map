{"version":3,"file":"extension.js","mappings":"8bAEA,eAGA,oBAAyBA,GAGxBC,QAAQC,IAAI,2KAGZF,EAAQG,cAAcC,KAAKC,EAAOC,SAASC,gBAAgB,2BAA2B,MAItF,W,wCAIC,MAAMC,EAASH,EAAOI,OAAOC,iBACvBC,EAAqC,QAA9B,EAAAN,EAAOI,OAAOC,wBAAgB,eAAEE,SAASC,QAAQL,EAAQM,WAGtE,QAAaC,IAATJ,GAA+B,KAATA,EAEzB,YADAN,EAAOI,OAAOO,uBAAuB,qEAKtC,IAAIC,EAA0BZ,EAAOa,UAAUC,iBAAiB,aAAaC,IAAI,gBACjF,IAAIC,EAAyB,IAAIC,MAAMjB,EAAOa,UAAUC,iBAAiB,aAAaC,IAAI,kBAGtFG,EAAmBC,KAAKC,MAAMD,KAAKE,UAAUL,IAG7CM,EAAoBC,OAAOC,KAAKN,EAAiB,IAAIO,KAAKC,GAAQ,CAACC,OAAOD,GAAMR,EAAiB,GAAGQ,MAGxG,IAAIE,EAAgC,GAGpC,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAkBQ,OAAQD,IAC7CD,EAAM7B,KAAK,CACVgC,MAAOT,EAAkBO,GAAG,GAC5BG,YAAaV,EAAkBO,GAAG,GAElCI,OAAQ,UAAUX,EAAkBO,GAAG,UAAUvB,EAAOA,EAAKwB,QAAU,GAAKxB,EAAK4B,MAAM,EAAG,IAAM5B,EAAK4B,MAAM,EAAG,IAAIC,OAAO,KAAO,OAKlI,MAAMC,EAA6C,CAClDL,MAAO,oBACPC,YAAapB,EACbqB,OAAQ,mCAGTL,EAAM7B,KAAKqC,GAGXR,EAAQA,EAAMS,QAAO,CAACC,EAAMC,EAAOC,IAClCD,IAAUC,EAAKC,WAAWC,GACzBA,EAAEV,cAAgBM,EAAKN,gBAKzB,IAAIW,QAA6B3C,EAAOI,OAAOwC,cAAchB,GAGzDiB,EAAoB,GAIvBA,EAFGF,MAAAA,EAES/B,EAKA+B,MAAAA,OAAoB,EAApBA,EAAsBX,YAK/Ba,EAAUC,SAAS,OAGtBD,EAAYA,EAAUE,QAAQ,KAAMzC,GAAc,IAGlDN,EAAOI,OAAOO,uBAAuB,cAAagC,MAAAA,OAAoB,EAApBA,EAAsBZ,OAAQY,MAAAA,OAAoB,EAApBA,EAAsBZ,MAAQ,cAAczB,KAE5HN,EAAOgD,IAAIC,aAAajD,EAAOkD,IAAI9B,MAAMyB,KAIzC7C,EAAOI,OAAO+C,iBAAiB,mBAAkBR,MAAAA,OAAoB,EAApBA,EAAsBZ,OAAQY,MAAAA,OAAoB,EAApBA,EAAsBZ,MAAQ,qEArF9GqB,QA6FF,2B,QCzGAC,EAAOC,QAAUC,QAAQ,YCCrBC,EAA2B,GCE3BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBjD,IAAjBkD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,IAOV,OAHAO,EAAoBF,GAAUG,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,QClBWI,CAAoB,K","sources":["../.././src/web/extension.ts","../../external commonjs \"vscode\"","../../webpack/bootstrap","../../webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\r\n// Import the module and reference it with the alias vscode:\r\nimport * as vscode from 'vscode';\r\n\r\n// this method is called when the extension is activated:\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\r\n\t// Notify the user that the extension has been activated successfully:\r\n\tconsole.log('Thank you for installing Web Search, the extension is now active! To use, right click some highlighted text in your editor or type \"web search\" in the command pallete.');\r\n\r\n\t// Provide the implementation of the command with registerCommand using the commandId parameter from the command field in package.json\r\n\tcontext.subscriptions.push(vscode.commands.registerCommand('WebSearch.webSearchMenu', () => {\r\n\t\tperformWebSearch();\r\n\t}));\r\n\r\n\tasync function performWebSearch() {\r\n\t\t//Function to perform the web search\r\n\r\n\t\t//Gather the user's currently selected text from the active text editor:\r\n\t\tconst editor = vscode.window.activeTextEditor;\r\n\t\tconst text = vscode.window.activeTextEditor?.document.getText(editor!.selection);\r\n\r\n\t\t//Display a message to the user if no text was selected:\r\n\t\tif (text === undefined || text === \"\") {\r\n\t\t\tvscode.window.showInformationMessage(`No text selected. Please select text in the editor and try again.`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//Retrieve the extension's search engine configuration from the user settings:\r\n\t\tlet searchEngineOld: string = vscode.workspace.getConfiguration('webSearch').get('searchEngine')!;//Deprecated, will be removed in future versions\r\n\t\tvar searchEngine: string[] = new Array(vscode.workspace.getConfiguration('webSearch').get('searchEngines'));\r\n\r\n\t\t//Convert the JSON object to string and parse the string to an object:\r\n\t\tvar searchEngineList = JSON.parse(JSON.stringify(searchEngine));\r\n\r\n\t\t//Map the searchEngineList to a new array:\r\n\t\tvar searchEngineArray = Object.keys(searchEngineList[0]).map((key) => [String(key), searchEngineList[0][key]]);\r\n\r\n\t\t//Now that we have an array of search engines, we need to loop through them and display them in a quick pick list\r\n\t\tlet items: vscode.QuickPickItem[] = [];\r\n\r\n\t\t//Loop through the search engines array in the configuration settings and add them to the list:\r\n\t\tfor (let i = 0; i < searchEngineArray.length; i++) {\r\n\t\t\titems.push({\r\n\t\t\t\tlabel: searchEngineArray[i][0],\r\n\t\t\t\tdescription: searchEngineArray[i][1],\r\n\t\t\t\t//Display the selected text in the quick pick list. If the text exceeds 60 characters, it will be truncated with an ellipsis:\r\n\t\t\t\tdetail: `Search ${searchEngineArray[i][0]} for ${text ? text.length <= 60 ? text.slice(0, 60) : text.slice(0, 60).concat('â€¦') : \"\"}`,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t//Create a quick pick list variable to handle the old search engine (defined as it is used a couple times, saving many lines of code):\r\n\t\tconst searchEngineOldArray: vscode.QuickPickItem = {\r\n\t\t\tlabel: \"Old Search Engine\",\r\n\t\t\tdescription: searchEngineOld,\r\n\t\t\tdetail: \"Search Engine from old settings\",\r\n\t\t};\r\n\r\n\t\titems.push(searchEngineOldArray);\r\n\r\n\t\t//remove any duplicate items with the same description:\r\n\t\titems = items.filter((item, index, self) =>\r\n\t\t\tindex === self.findIndex((t) => (\r\n\t\t\t\tt.description === item.description\r\n\t\t\t))\r\n\t\t);\r\n\r\n\t\t//Use await to wait for the user to select an item from the list:\r\n\t\tlet selectedSearchEngine = await vscode.window.showQuickPick(items);\r\n\r\n\t\t//Create the final search url:\r\n\t\tlet searchUrl: string = \"\";\r\n\r\n\t\tif (selectedSearchEngine === null || selectedSearchEngine === undefined) {\r\n\t\t\t//Set the search engine to the default search engine if one is not selected:\r\n\t\t\tsearchUrl = searchEngineOld;\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//Set the search engine to the selected Quick Pick engine:\r\n\t\t\tsearchUrl = selectedSearchEngine?.description!;\r\n\r\n\t\t}\r\n\r\n\t\t//Determine if the searchURL contains '%s', and if it does not, then display a message to the user that thir setting entry is not valid:\r\n\t\tif (searchUrl.includes(\"%s\")) {\r\n\r\n\t\t\t//Perform a string replacement to replace the %s placeholder of the search engine with the $text search query:\r\n\t\t\tsearchUrl = searchUrl.replace('%s', text ? text : \"\")!;\r\n\r\n\t\t\t//Display to the user what action is being taken and on what search engine:\r\n\t\t\tvscode.window.showInformationMessage(`Searching ${selectedSearchEngine?.label ? selectedSearchEngine?.label : \"web\"} for: ${text}`);\r\n\t\t\t//Perform the web search in the default browser:\r\n\t\t\tvscode.env.openExternal(vscode.Uri.parse(searchUrl!));\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//Display to the user that their search engine setting is not valid:\r\n\t\t\tvscode.window.showErrorMessage(`Search engine, ${selectedSearchEngine?.label ? selectedSearchEngine?.label : \"web\"} setting is not valid. Please check your custom settings.`);\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Extension is deactivated\r\nexport function deactivate() { }\r\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(236);\n"],"names":["context","console","log","subscriptions","push","vscode","commands","registerCommand","editor","window","activeTextEditor","text","document","getText","selection","undefined","showInformationMessage","searchEngineOld","workspace","getConfiguration","get","searchEngine","Array","searchEngineList","JSON","parse","stringify","searchEngineArray","Object","keys","map","key","String","items","i","length","label","description","detail","slice","concat","searchEngineOldArray","filter","item","index","self","findIndex","t","selectedSearchEngine","showQuickPick","searchUrl","includes","replace","env","openExternal","Uri","showErrorMessage","performWebSearch","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}