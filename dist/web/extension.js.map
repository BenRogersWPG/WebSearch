{"version":3,"file":"extension.js","mappings":"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","sources":["../.././src/web/extension.ts","../../external commonjs \"vscode\"","../../webpack/bootstrap","../../webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\r\n// Import the module and reference it with the alias vscode:\r\nimport * as vscode from 'vscode';\r\n\r\n// this method is called when the extension is activated:\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\r\n\t// Notify the user that the extension has been activated successfully:\r\n\tconsole.log('Thank you for installing Web Search, the extension is now active! To use, right click some highlighted text in your editor or type \"web search\" in the command palette.');\r\n\r\n\t//Define a channel for the output of any potential errors:\r\n\tconst webSearchConsole = vscode.window.createOutputChannel(\"Web Search\", \"markdown\");\r\n\r\n\t// Register a command that will toggle when the extension is demoing searching from selected text:\r\n\tcontext.subscriptions.push(vscode.commands.registerCommand('WebSearch.selectedTextDemo', async () => {\r\n\t\tawait new Promise(resolve => setTimeout(resolve, 1000));\r\n\t\tvscode.commands.executeCommand('setContext', 'searchSelectedText', true);\r\n\t\tvscode.window.showInformationMessage(`Select the search engine to use using the list above.`);\r\n\t\tperformWebSearch(true);\r\n\t}));\r\n\r\n\t// Register a command to run the extension for the first time - used in the extension's walkthrough:\r\n\tcontext.subscriptions.push(vscode.commands.registerCommand('WebSearch.firstRun', async () => {\r\n\t\tawait new Promise(resolve => setTimeout(resolve, 500));\r\n\t\tvscode.commands.executeCommand('setContext', 'firstRun', true);\r\n\t\tvscode.window.showInformationMessage(`Type a query in the search bar at the top of the screen & press Enter.`);\r\n\t\tperformWebSearch();\r\n\t}));\r\n\r\n\t// Register a command to update a setting (toggling demo mode), which is used in the extension's walkthrough:\r\n\tcontext.subscriptions.push(vscode.commands.registerCommand('WebSearch.changeSetting', async () => {\r\n\t\tawait new Promise(resolve => setTimeout(resolve, 1000));\r\n\t\tvscode.workspace.getConfiguration('webSearch').update('useDefaultSearchEnginesList', false);\r\n\t\tvscode.commands.executeCommand('setContext', 'demoModeOff', true);\r\n\t\tvscode.window.showInformationMessage(`Demo mode off. Remember to add your own search engines in settings.`);\r\n\t}));\r\n\r\n\t// Register a command that will take the user to the WebSearch extension's settings page:\r\n\tcontext.subscriptions.push(vscode.commands.registerCommand('WebSearch.openSettings', () => {\r\n\t\tvscode.commands.executeCommand('workbench.action.openSettings', 'WebSearch.searchEngines');\r\n\t\tvscode.window.showInformationMessage(`Add your own search engines by clicking the Add Item button.`);\r\n\t}));\r\n\r\n\t// Register a command that will toggle when the extension is run after entering custom search engines:\r\n\tcontext.subscriptions.push(vscode.commands.registerCommand('WebSearch.setContext', async () => {\r\n\t\tawait new Promise(resolve => setTimeout(resolve, 1000));\r\n\t\tvscode.commands.executeCommand('setContext', 'customSearch', true);\r\n\t\tvscode.window.showInformationMessage(`You should now see your custom search engines in the search bar.`);\r\n\t\tperformWebSearch();\r\n\t}));\r\n\r\n\t// Register a command that will toggle when the extension is demoing the Command Palette:\r\n\tcontext.subscriptions.push(vscode.commands.registerCommand('WebSearch.setPaletteContext', async () => {\r\n\t\tawait new Promise(resolve => setTimeout(resolve, 1000));\r\n\t\tvscode.commands.executeCommand('setContext', 'searchCommandPalette', true);\r\n\t\tvscode.window.showInformationMessage(`Run the extension by typing \"web search\" in the command palette.`);\r\n\t\tperformWebSearch();\r\n\t}));\r\n\r\n\t// Provide the implementation of the command with registerCommand using the commandId parameter from the command field in package.json\r\n\tcontext.subscriptions.push(vscode.commands.registerCommand('WebSearch.webSearchMenu', () => {\r\n\t\tperformWebSearch();\r\n\t}));\r\n\r\n\tasync function performWebSearch(demo: boolean = false) {\r\n\t\t//Function to perform the web search\r\n\r\n\t\t//Gather the user's currently selected text from the active text editor:\r\n\t\tconst editor = vscode.window.activeTextEditor;\r\n\t\tlet text = demo ? \"eslint\" : vscode.window.activeTextEditor?.document.getText(editor!.selection); //If demo is true, use the string \"eslint\" as the search term\r\n\r\n\t\tconst manualSearch: boolean = vscode.workspace.getConfiguration('webSearch').get('allowManualSearch')!;\r\n\t\tconst defaultSearch: boolean = vscode.workspace.getConfiguration('webSearch').get('useDefaultSearchEnginesList')!;\r\n\r\n\t\t//Display a message to the user if no text was selected:\r\n\t\tif ((text === undefined || text === \"\") && (!manualSearch)) {\r\n\t\t\tvscode.window.showInformationMessage(`No text selected. Please select text in the editor and try again.`);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//If manual search setting is enabled, prompt the user for a search term:\r\n\t\telse if ((text === undefined || text === \"\") && (manualSearch)) {\r\n\t\t\t//text = await vscode.window.showQuickPick([\"Code\", \"Autocomplete\", \"Here\", \"Sometime\", \"Soon\"]);\r\n\t\t\ttext = await vscode.window.showInputBox({\r\n\t\t\t\tplaceHolder: 'Please enter the text you would like to search for.',\r\n\t\t\t\tprompt: 'Please enter the text you would like to search for.',\r\n\t\t\t\tignoreFocusOut: true,\r\n\t\t\t\tvalidateInput: (value: string) => {\r\n\t\t\t\t\tif (value === '') {\r\n\t\t\t\t\t\treturn 'Please enter a search term.';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\t\t\tif (text === undefined || text === \"\") {\r\n\t\t\t\tvscode.window.showInformationMessage(`No text entered. Please enter text in the prompt, or select text.`);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Retrieve the extension's search engine configuration from the user settings:\r\n\t\tconst searchEngineOld: string = vscode.workspace.getConfiguration('webSearch').get('searchEngine')!;//Deprecated, will be removed in future versions\r\n\r\n\t\t//Get the user settings from the extension's settings.json file:\r\n\t\tconst searchEngine: string[] = new Array(vscode.workspace.getConfiguration('webSearch').get('searchEngines'));\r\n\r\n\t\t//Define default search engine signature:\r\n\t\tinterface IDefaultObject { sitename: string; url: string; }\r\n\r\n\t\t//use this interface to ghet the default search engine list from the settings.json file:\r\n\t\tconst defaultSearchEngines: IDefaultObject[] = new Array(vscode.workspace.getConfiguration('webSearch').get('defaultSearchEngines'));\r\n\r\n\t\t//Now that we have an array of search engines, we need to loop through them and display them in a quick pick list\r\n\t\tlet items: vscode.QuickPickItem[] = [];\r\n\r\n\t\t//Only populate the default search engine list if the user wishes to use default search engines:\r\n\t\tif (defaultSearch) {\r\n\t\t\t//Loop through the search engines array in the configuration settings and add them to the list:\r\n\t\t\tdefaultSearchEngines.forEach(site => {\r\n\t\t\t\tObject.entries(site).forEach(([key, value]) => {\r\n\t\t\t\t\t//console.log(key, value);\r\n\t\t\t\t\titems.push({\r\n\t\t\t\t\t\tlabel: value.sitename,\r\n\t\t\t\t\t\tdescription: value.url,\r\n\t\t\t\t\t\t//Display the selected text in the quick pick list. If the text exceeds 60 characters, it will be truncated with an ellipsis:\r\n\t\t\t\t\t\tdetail: `Search ${value.sitename} for ${text ? text.length <= 60 ? text.slice(0, 60) : text.slice(0, 60).concat('…') : \"\"}`,\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t//Convert the JSON object to string and parse the string to an object:\r\n\t\tvar searchEngineList = JSON.parse(JSON.stringify(searchEngine));\r\n\r\n\t\t//Map the searchEngineList to a new array:\r\n\t\tvar searchEngineArray = Object.keys(searchEngineList[0]).map((key) => [String(key), searchEngineList[0][key]]);\r\n\r\n\t\t//Loop through the search engines array in the configuration settings and add them to the list:\r\n\t\tfor (let i = 0; i < searchEngineArray.length; i++) {\r\n\t\t\titems.push({\r\n\t\t\t\tlabel: searchEngineArray[i][0],\r\n\t\t\t\tdescription: searchEngineArray[i][1],\r\n\t\t\t\t//Display the selected text in the quick pick list. If the text exceeds 60 characters, it will be truncated with an ellipsis:\r\n\t\t\t\tdetail: `Search ${searchEngineArray[i][0]} for ${text ? text.length <= 60 ? text.slice(0, 60) : text.slice(0, 60).concat('…') : \"\"}`,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\t//Only populate the old search engine list if the user wishes to use default search engines:\r\n\t\tif (defaultSearch || items.length === 0) {\r\n\r\n\t\t\t//Create a quick pick list variable to handle the old search engine (defined as it is used a couple times, saving many lines of code):\r\n\t\t\tconst searchEngineOldArray: vscode.QuickPickItem = {\r\n\t\t\t\tlabel: \"Search Engine\",\r\n\t\t\t\tdescription: searchEngineOld,\r\n\t\t\t\tdetail: \"Search Engine from old settings\",\r\n\t\t\t};\r\n\r\n\t\t\titems.push(searchEngineOldArray);\r\n\t\t}\r\n\r\n\t\t//remove any duplicate items with the same description:\r\n\t\titems = items.filter((item, index, self) =>\r\n\t\t\tindex === self.findIndex((t) => (\r\n\t\t\t\tt.description === item.description\r\n\t\t\t))\r\n\t\t);\r\n\r\n\t\t//Initialize selectedSearchEngine variable as a QuickPickItem:\r\n\t\tlet selectedSearchEngine: vscode.QuickPickItem;\r\n\r\n\t\t//Initialize a boolean variable that, when set to true, indicates that there is only 1 search engine defined and the extension will open the URL directly:\r\n\t\tlet directSearch = false;\r\n\r\n\t\t//If more than one item is in the list, display the list in a quick pick list, otherwise, just run the search in the single search engine:\r\n\t\tif (items.length > 1) {\r\n\t\t\t//Use await to wait for the user to select an item from the list:\r\n\t\t\tselectedSearchEngine = await vscode.window.showQuickPick(items) as vscode.QuickPickItem;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//If only one item exits in the list, use that item as the search engine (search it directly) - no need to prompt the user:\r\n\t\t\tselectedSearchEngine = items[0];\r\n\t\t\tdirectSearch = true;\r\n\t\t}\r\n\r\n\t\t//Create the final search url:\r\n\t\tlet searchUrl: string = \"\";\r\n\r\n\t\tif (selectedSearchEngine === null || selectedSearchEngine === undefined) {\r\n\t\t\t//Since no search engine was selected, notify the user and end the function:\r\n\t\t\tvscode.window.showWarningMessage(`No search engine selected. Please select one from the list and try again.`);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//Set the search engine to the selected Quick Pick engine:\r\n\t\t\tsearchUrl = selectedSearchEngine?.description!;\r\n\r\n\t\t}\r\n\r\n\t\t//Determine if the searchURL begins with http/https as well as contains '%s', and if it does not, then display a message to the user that thir setting entry is not valid:\r\n\t\tif ((searchUrl.startsWith(\"http://\") || searchUrl.startsWith(\"https://\")) && (searchUrl.includes(\"%s\"))) {\r\n\r\n\t\t\t//Perform a string replacement to replace the %s placeholder of the search engine with the $text search query:\r\n\t\t\tsearchUrl = searchUrl.replace('%s', text ? text : \"\")!;\r\n\r\n\t\t\t//Display to the user what action is being taken and on what search engine:\r\n\t\t\tdirectSearch ? vscode.window.showInformationMessage(`Only one search engine exists, so searching ${selectedSearchEngine?.label ? selectedSearchEngine?.label : \"web\"} directly for: ${text}. \\nFeel free to add more search engines in the settings.`) : vscode.window.showInformationMessage(`Searching ${selectedSearchEngine?.label ? selectedSearchEngine?.label : \"web\"} for: ${text}`);\r\n\t\t\t//Perform the web search in the default browser:\r\n\t\t\tvscode.env.openExternal(vscode.Uri.parse(searchUrl!));\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//Display to the user that their search engine setting is not valid:\r\n\t\t\tconst errorMessage: string = `Search engine, *${selectedSearchEngine?.label ? selectedSearchEngine?.label : \"web\"}* setting is not valid. Please check your custom settings.`;\r\n\r\n\t\t\t//Log the error to the extension's output channel and the console:\r\n\t\t\twebSearchConsole.appendLine(errorMessage + \"\\nBe sure to include `%s` in the search engine URL and that it begins with `http://` or `https://`.\");\r\n\t\t\tconsole.log(errorMessage);\r\n\r\n\t\t\t//Show button to user and offer to bring them to the settings to edit their invalid search engine:\r\n\t\t\tconst messageResponse = await vscode.window.showErrorMessage(errorMessage, 'Edit Search Engine');\r\n\t\t\tif (messageResponse === \"Edit Search Engine\") {\r\n\t\t\t\tvscode.commands.executeCommand('workbench.action.openSettings', 'WebSearch.searchEngines');\r\n\t\t\t\tvscode.window.showInformationMessage(`Make changes to your invalid search engine, ${selectedSearchEngine?.label ? selectedSearchEngine?.label : \"web\"}. Make sure to add '%s' in the Value field`);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Extension is deactivated\r\nexport function deactivate() { }\r\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(236);\n"],"names":["context","console","log","webSearchConsole","vscode","window","createOutputChannel","performWebSearch","demo","editor","activeTextEditor","text","document","getText","selection","manualSearch","workspace","getConfiguration","get","defaultSearch","undefined","showInformationMessage","showInputBox","placeHolder","prompt","ignoreFocusOut","validateInput","value","searchEngineOld","searchEngine","Array","defaultSearchEngines","items","forEach","site","Object","entries","key","push","label","sitename","description","url","detail","length","slice","concat","searchEngineList","JSON","parse","stringify","searchEngineArray","keys","map","String","i","searchEngineOldArray","selectedSearchEngine","filter","item","index","self","findIndex","t","directSearch","showQuickPick","searchUrl","startsWith","includes","replace","env","openExternal","Uri","errorMessage","appendLine","showErrorMessage","commands","executeCommand","showWarningMessage","subscriptions","registerCommand","Promise","resolve","setTimeout","update","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}